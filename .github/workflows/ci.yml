name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: "0 2 * * *"

env:
  NODE_VERSION: "18"

jobs:
  # Lint and type check
  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Type check
        run: npx tsc --noEmit

  # Unit tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: |
          npx vitest run \
            --include "src/**/*.test.ts" \
            --include "src/**/*.test.tsx" \
            --exclude "src/**/__tests__/integration/**" \
            --exclude "src/**/__tests__/e2e/**" \
            --exclude "src/__tests__/performance/**" \
            --exclude "src/__tests__/compatibility/**" \
            --reporter=json \
            --outputFile=test-reports/unit-tests.json

      - name: Upload unit test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: test-reports/unit-tests.json

  # Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run integration tests
        run: |
          npx vitest run \
            --include "src/**/__tests__/integration/**/*.test.ts" \
            --testTimeout=30000 \
            --reporter=json \
            --outputFile=test-reports/integration-tests.json

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: test-reports/integration-tests.json

  # End-to-end tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run E2E tests
        run: |
          npx vitest run \
            --include "src/**/__tests__/e2e/**/*.test.tsx" \
            --environment=jsdom \
            --testTimeout=60000 \
            --reporter=json \
            --outputFile=test-reports/e2e-tests.json

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: test-reports/e2e-tests.json

  # Performance tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run performance tests
        run: |
          npx vitest run \
            --include "src/__tests__/performance/**/*.test.ts" \
            --testTimeout=120000 \
            --reporter=json \
            --outputFile=test-reports/performance-tests.json

      - name: Upload performance test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: test-reports/performance-tests.json

  # Cross-platform compatibility tests
  compatibility-tests:
    name: Cross-Platform Tests
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: ["16", "18", "20"]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run compatibility tests
        run: |
          npx vitest run \
            --include "src/__tests__/compatibility/**/*.test.ts" \
            --testTimeout=60000 \
            --reporter=json \
            --outputFile=test-reports/compatibility-tests-${{ matrix.os }}-node${{ matrix.node-version }}.json

      - name: Upload compatibility test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: compatibility-test-results-${{ matrix.os }}-node${{ matrix.node-version }}
          path: test-reports/compatibility-tests-${{ matrix.os }}-node${{ matrix.node-version }}.json

  # Coverage analysis
  coverage:
    name: Coverage Analysis
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run coverage analysis
        run: node scripts/test-coverage.js

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage/
            test-reports/coverage-*.json
            test-reports/coverage-*.html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Comprehensive test suite
  comprehensive-tests:
    name: Comprehensive Test Suite
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests, e2e-tests, performance-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run comprehensive test suite
        run: node scripts/test-ci.js

      - name: Upload comprehensive test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: comprehensive-test-results
          path: test-reports/

  # Build and package
  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [comprehensive-tests, coverage]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build extension
        run: npm run package

      - name: Package extension
        run: npx vsce package --no-dependencies

      - name: Upload extension package
        uses: actions/upload-artifact@v4
        with:
          name: extension-package
          path: "*.vsix"

  # Security scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # Publish test results
  publish-results:
    name: Publish Test Results
    runs-on: ubuntu-latest
    needs: [comprehensive-tests, compatibility-tests]
    if: always()
    steps:
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: all-test-results/

      - name: Publish test results
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Test Results
          path: "all-test-results/**/*.json"
          reporter: "java-junit"
          fail-on-error: true

  # Notify on failure
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [comprehensive-tests, coverage, build, security]
    if: failure()
    steps:
      - name: Notify failure
        run: |
          echo "‚ùå CI/CD Pipeline failed!"
          echo "Check the logs for details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

  # Success notification
  notify-success:
    name: Notify on Success
    runs-on: ubuntu-latest
    needs: [comprehensive-tests, coverage, build, security]
    if: success()
    steps:
      - name: Notify success
        run: |
          echo "üéâ CI/CD Pipeline completed successfully!"
          echo "All tests passed and build is ready for deployment."
